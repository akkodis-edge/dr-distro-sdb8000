#Reusable workflow for building sdb8000 image
name: 'sdb8000'
on:
  workflow_call:
    inputs:
      build_type:
        description: 'Build type, staging or release'
        required: true
        type: string
      p11_kit: 
        description: 'p11-kit runtime path'
        required: true
        type: string
      p11_kit_addr: 
        description: 'p11-kit server unix socet address'
        required: true
        type: string
      docker_img: 
        description: 'Docker image name'
        required: true
        type: string
      dl_dir: 
        description: 'Yocto Download path'
        required: true
        type: string
      sstate_dir:
        description: 'Yocto state cashe Download path'
        required: true
        type: string

jobs:
  build:
    runs-on: [ self-hosted, Linux, drse ]
    timeout-minutes: 360
    container:
      image: ${{inputs.docker_img}}
      volumes:
        - ${{inputs.dl_dir}}:${{inputs.dl_dir}}
        - ${{inputs.sstate_dir}}:${{inputs.sstate_dir}}
        - ${{inputs.p11_kit}}:${{inputs.p11_kit}}
    env:
      SFTP_URL: 'ftp.datarespons.com'
      SFTP_PATH: 'jenkins/sdb8000/image-${{inputs.build_type}}'
      SFTP_USER: 'dr-solutions-jenkins'
      DISTRO: 'datarespons-distro'
      DL_DIR: ${{inputs.dl_dir}}
      SSTATE_DIR: ${{inputs.sstate_dir}}
      #PKCS11_TOKEN: ${{vars.FIT_IMAGE_TOKEN_PKCS11_URI}}
      P11_KIT_SERVER_ADDRESS: ${{inputs.p11_kit_addr}}
      #FIT_IMAGE_SIGNING_PKCS11_URI: ${{secrets.FIT_IMAGE_OBJECT_PKCS11_URI}}
      #FIT_IMAGE_SIGNING_PKCS11_HINT: ${{vars.FIT_IMAGE_TOKEN_PKCS11_HINT}}      
      HOME: /home/github-runner
      MACHINE: 'sdb8000'
    steps:
      - name: 'Verify running in container'
        run: ls /.dockerenv && echo Container started

      #- name: 'Validate HSM'
      #  run: p11tool --test-sign $FIT_IMAGE_SIGNING_PKCS11_URI

      - name: 'Setup SSH access and env variables'
        run: |
          echo "GTAG=$(git describe --always --tags --long --dirty)" >> $GITHUB_ENV
          echo "DR_CM_COMMIT=$(git describe --always --tags --long --dirty)" >> $GITHUB_ENV
          echo "DR_BUILD_NO=${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "DR_BUILD_PLAN=${JOB_NAME}" >> $GITHUB_ENV
          echo "BB_ENV_PASSTHROUGH_ADDITIONS=DR_BUILD_PLAN DR_BUILD_NO DR_CM_COMMIT MACHINE DISTRO DL_DIR SSTATE_DIR \
            FIT_IMAGE_SIGNING_PKCS11_URI FIT_IMAGE_SIGNING_PKCS11_HINT P11_KIT_SERVER_ADDRESS" >> $GITHUB_ENV

          mkdir -p $HOME/.ssh
          chmod 0700 $HOME/.ssh
          echo "${{ secrets.SSH_BUILD_KEY }}" > $HOME/.ssh/id_github
          chmod 0600 $HOME/.ssh/id_github
          echo "${{ secrets.ID_DR_BUILD }}" > $HOME/.ssh/id_dr_build
          chmod 0600 $HOME/.ssh/id_dr_build

          echo "Host $SFTP_URL" > $HOME/.ssh/config
          echo "  User $SFTP_USER" >> $HOME/.ssh/config
          echo "  IdentityFile $HOME/.ssh/id_dr_build" >> $HOME/.ssh/config
          echo "Host github.com" >> $HOME/.ssh/config
          echo "  IdentityFile $HOME/.ssh/id_github" >> $HOME/.ssh/config

          echo "${{vars.DATARESPONS_KNOWN_HOSTS}}" > $HOME/.ssh/known_hosts

      - name: 'Build-sdb8000'
        uses: ./.github/actions/do-build-deploy
        with:
          deploy_path: 'sdb8000'
          sdk: 'yes'
        env:
          DISTRO: 'datarespons-distro'
          IMAGE_NAME: 'sdb8000-image'

      - name: 'Build-Service'
        uses: ./.github/actions/do-build-deploy
        with:
          deploy_path: 'service'
          sdk: 'yes'
        env:
          DISTRO: 'datarespons-distro'
          IMAGE_NAME: 'service-image'
         
      - name: 'Build-Service-Usb'
        uses: ./.github/actions/do-build-deploy
        with:
          deploy_path: 'service'
        env:
          DISTRO: 'datarespons-distro'
          IMAGE_NAME: 'service-usb'
